{
    "scope": "source.cfscript - source.sql - text.html.cfm,source.cfscript.embedded.cfml, source.sql source.cfscript",
    "completions":
    [
        // misc completions
        { "trigger": "true", "contents": "true"},
        { "trigger": "false", "contents": "false"},
        { "trigger": "TRUE", "contents": "TRUE"},
        { "trigger": "FALSE", "contents": "FALSE"},
        // functions
        { "trigger": "abs", "contents": "abs(${1:${2:number}})"},
        { "trigger": "aCos", "contents": "aCos(${1:${2:number}})"},
        { "trigger": "arrayAppend", "contents": "arrayAppend(${1:${2:array}, ${3:value}})"},
        { "trigger": "arrayAvg", "contents": "arrayAvg(${1:${2:array}})"},
        { "trigger": "arrayClear", "contents": "arrayClear(${1:${2:array}})"},
        { "trigger": "arrayDeleteAt", "contents": "arrayDeleteAt(${1:${2:array}, ${3:position}})"},
        { "trigger": "arrayInsertAt", "contents": "arrayInsertAt(${1:${2:array}, ${3:position}, ${4:value}})"},
        { "trigger": "arrayIsEmpty", "contents": "arrayIsEmpty(${1:${2:array}})"},
        { "trigger": "arrayLen", "contents": "arrayLen(${1:${2:array}})"},
        { "trigger": "arrayMax", "contents": "arrayMax(${1:${2:array}})"},
        { "trigger": "arrayMin", "contents": "arrayMin(${1:${2:array}})"},
        { "trigger": "arrayNew", "contents": "arrayNew(${1:${2:dimension}})"},
        { "trigger": "arrayPrepend", "contents": "arrayPrepend(${1:${2:array}, ${3:value}})"},
        { "trigger": "arrayResize", "contents": "arrayResize(${1:${2:array}, ${3:size}})"},
        { "trigger": "arraySet", "contents": "arraySet(${1:${2:array}, ${3:start_pos}, ${4:end_pos}, ${5:value}})"},
        { "trigger": "arraySort", "contents": "arraySort(${1:${2:array}, \"${3:sort_type}\"${4:, [sort_order]}})"},
        { "trigger": "arraySum", "contents": "arraySum(${1:${2:array}})"},
        { "trigger": "arraySwap", "contents": "arraySwap(${1:${2:array}, ${3:position1}, ${4:position2}})"},
        { "trigger": "arrayToList", "contents": "arrayToList(${1:${2:array}${3:, [delimiter]}})"},
        { "trigger": "asc", "contents": "asc(${1:\"${2:string}\"})"},
        { "trigger": "aSin", "contents": "aSin(${1:${2:number}})"},
        { "trigger": "atn", "contents": "atn(${1:${2:number}})"},
        { "trigger": "binaryDecode", "contents": "binaryDecode(${1:\"${2:string}\", \"${3:binaryencoding}\"})"},
        { "trigger": "binaryEncode", "contents": "binaryEncode(${1:${2:binarydata}, \"${3:encoding}\"})"},
        { "trigger": "bitAnd", "contents": "bitAnd(${1:${2:number1}, ${3:number2}})"},
        { "trigger": "bitMaskClear", "contents": "bitMaskClear(${1:${2:number}, ${3:start}, ${4:length}})"},
        { "trigger": "bitMaskRead", "contents": "bitMaskRead(${1:${2:number}, ${3:start}, ${4:length}})"},
        { "trigger": "bitMaskSet", "contents": "bitMaskSet(${1:${2:number}, ${3:mask}, ${4:start}, ${5:length}})"},
        { "trigger": "bitNot", "contents": "bitNot(${1:${2:number}})"},
        { "trigger": "bitOr", "contents": "bitOr(${1:${2:number1}, ${3:number2}})"},
        { "trigger": "bitSHLN", "contents": "bitSHLN(${1:${2:number}, ${3:count}})"},
        { "trigger": "bitSHRN", "contents": "bitSHRN(${1:${2:number}, ${3:count}})"},
        { "trigger": "bitXor", "contents": "bitXor(${1:${2:number1}, ${3:number2}})"},
        { "trigger": "ceiling", "contents": "ceiling(${1:${2:number}})"},
        { "trigger": "charsetDecode", "contents": "charsetDecode(${1:\"${2:string}\", \"${3:encoding}\"})"},
        { "trigger": "charsetEncode", "contents": "charsetEncode(${1:${2:binaryobject}, \"${3:encoding}\"})"},
        { "trigger": "chr", "contents": "chr(${1:${2:number}})"},
        { "trigger": "cJustify", "contents": "cJustify(${1:\"${2:string}\", ${3:length}})"},
        { "trigger": "compare", "contents": "compare(${1:\"${2:string1}\", \"${3:string2}\"})"},
        { "trigger": "compareNoCase", "contents": "compareNoCase(${1:\"${2:string1}\", \"${3:string2}\"})"},
        { "trigger": "cos", "contents": "cos(${1:${2:number}})"},
        { "trigger": "createDate", "contents": "createDate(${1:${2:year}, ${3:month}, ${4:day}})"},
        { "trigger": "createDateTime", "contents": "createDateTime(${1:${2:year}, ${3:month}, ${4:day}, ${5:hour}, ${6:minute}, ${7:second}})"},
        { "trigger": "createObject", "contents": "createObject(${1:\"${2:type}\", \"${3:context}\", \"${4:class}\", \"${5:locale}\", \"${6:servername}\", \"${7:component_name}\", \"${8:urltowsdl}\"${9:, [portname]}})"},
        { "trigger": "createODBCDate", "contents": "createODBCDate(${1:${2:date}})"},
        { "trigger": "createODBCDateTime", "contents": "createODBCDateTime(${1:${2:date}})"},
        { "trigger": "createODBCTime", "contents": "createODBCTime(${1:${2:date}})"},
        { "trigger": "createTime", "contents": "createTime(${1:${2:hour}, ${3:minute}, ${4:second}})"},
        { "trigger": "createTimeSpan", "contents": "createTimeSpan(${1:${2:days}, ${3:hours}, ${4:minutes}, ${5:seconds}})"},
        { "trigger": "createUUID", "contents": "createUUID(${1:})"},
        { "trigger": "dateAdd", "contents": "dateAdd(${1:\"${2:datepart}\", ${3:number}, ${4:date}})"},
        { "trigger": "dateCompare", "contents": "dateCompare(${1:${2:date1}, ${3:date2}${4:, [datePart]}})"},
        { "trigger": "dateConvert", "contents": "dateConvert(${1:\"${2:type}\", ${3:date}})"},
        { "trigger": "dateDiff", "contents": "dateDiff(${1:\"${2:datepart}\", ${3:date1}, ${4:date2}})"},
        { "trigger": "dateFormat", "contents": "dateFormat(${1:${2:date}${3:, [mask]}})"},
        { "trigger": "datePart", "contents": "datePart(${1:\"${2:datepart}\", ${3:date}})"},
        { "trigger": "day", "contents": "day(${1:${2:date}})"},
        { "trigger": "dayOfWeek", "contents": "dayOfWeek(${1:${2:date}})"},
        { "trigger": "dayOfWeekAsString", "contents": "dayOfWeekAsString(${1:${2:day_of_week}})"},
        { "trigger": "dayOfYear", "contents": "dayOfYear(${1:${2:date}})"},
        { "trigger": "daysInMonth", "contents": "daysInMonth(${1:${2:date}})"},
        { "trigger": "daysInYear", "contents": "daysInYear(${1:${2:date}})"},
        { "trigger": "de", "contents": "de(${1:\"${2:string}\"})"},
        { "trigger": "decimalFormat", "contents": "decimalFormat(${1:${2:number}})"},
        { "trigger": "decrementValue", "contents": "decrementValue(${1:${2:number}})"},
        { "trigger": "decrypt", "contents": "decrypt(${1:\"${2:encrypted_string}\", \"${3:seed}\"})"},
        { "trigger": "deleteClientVariable", "contents": "deleteClientVariable(${1:\"${2:name}\"})"},
        { "trigger": "deserializeJSON", "contents": "deserializeJSON(${1:string})"},
        { "trigger": "directoryExists", "contents": "directoryExists(${1:\"${2:absolute_path}\"})"},
        { "trigger": "dollarFormat", "contents": "dollarFormat(${1:${2:number}})"},
        { "trigger": "duplicate", "contents": "duplicate(${1:${2:variable}})"},
        { "trigger": "encrypt", "contents": "encrypt(${1:\"${2:string}\", \"${3:key}\"${4:, [algorithm]}${5:, [encoding]}})"},
        { "trigger": "evaluate", "contents": "evaluate(${1:\"${2:expression1}\"${3:, [expression2]}${4:, [expressionN]}})"},
        { "trigger": "exp", "contents": "exp(${1:${2:number}})"},
        { "trigger": "expandPath", "contents": "expandPath(${1:\"${2:relative_path}\"})"},
        { "trigger": "fileExists", "contents": "fileExists(${1:\"${2:path}\"})"},
        { "trigger": "find", "contents": "find(${1:\"${2:substring}\", \"${3:string}\"${4:, [start]}})"},
        { "trigger": "findNoCase", "contents": "findNoCase(${1:\"${2:substring}\", \"${3:string}\"${4:, [start]}})"},
        { "trigger": "findOneOf", "contents": "findOneOf(${1:\"${2:set}\", \"${3:string}\"${4:, [start]}})"},
        { "trigger": "firstDayOfMonth", "contents": "firstDayOfMonth(${1:${2:date}})"},
        { "trigger": "fix", "contents": "fix(${1:${2:number}})"},
        { "trigger": "formatBaseN", "contents": "formatBaseN(${1:${2:number}, ${3:radix}})"},
        { "trigger": "generateSecretKey", "contents": "generateSecretKey(${1:${2:[algorithm]}})"},
        { "trigger": "getAuthUser", "contents": "getAuthUser(${1:})"},
        { "trigger": "getBaseTagData", "contents": "getBaseTagData(${1:\"${2:tagname}\"${3:, [instancenumber]}})"},
        { "trigger": "getBaseTagList", "contents": "getBaseTagList(${1:})"},
        { "trigger": "getBaseTemplatePath", "contents": "getBaseTemplatePath(${1:})"},
        { "trigger": "getClientVariablesList", "contents": "getClientVariablesList(${1:})"},
        { "trigger": "getContextRoot", "contents": "getContextRoot(${1:})"},
        { "trigger": "getCurrentTemplatePath", "contents": "getCurrentTemplatePath(${1:})"},
        { "trigger": "getDirectoryFromPath", "contents": "getDirectoryFromPath(${1:\"${2:path}\"})"},
        { "trigger": "getEncoding", "contents": "getEncoding(${1:\"${2:scope_name}\"})"},
        { "trigger": "getException", "contents": "getException(${1:${2:javaobject}})"},
        { "trigger": "getFileFromPath", "contents": "getFileFromPath(${1:\"${2:path}\"})"},
        { "trigger": "getFunctionList", "contents": "getFunctionList(${1:})"},
        { "trigger": "getGatewayHelper", "contents": "getGatewayHelper(${1:\"${2:gatewayID}\"})"},
        { "trigger": "getHTTPRequestData", "contents": "getHTTPRequestData(${1:})"},
        { "trigger": "getHTTPTimeString", "contents": "getHTTPTimeString(${1:${2:datetime}})"},
        { "trigger": "getK2ServerDocCount", "contents": "getK2ServerDocCount(${1:})"},
        { "trigger": "getK2ServerDocCountLimit", "contents": "getK2ServerDocCountLimit(${1:})"},
        { "trigger": "getLocale", "contents": "getLocale(${1:})"},
        { "trigger": "getLocaleDisplayName", "contents": "getLocaleDisplayName(${1:})"},
        { "trigger": "getMetaData", "contents": "getMetaData(${1:${2:object}})"},
        { "trigger": "getMetricData", "contents": "getMetricData(${1:\"${2:mode}\"})"},
        { "trigger": "getPageContext", "contents": "getPageContext(${1:})"},
        { "trigger": "getProfileSections", "contents": "getProfileSections(${1:\"${2:inifile}\"})"},
        { "trigger": "getProfileString", "contents": "getProfileString(${1:\"${2:inipath}\", \"${3:section}\", \"${4:entry}\"})"},
        { "trigger": "getSOAPRequest", "contents": "getSOAPRequest(${1:})"},
        { "trigger": "getSOAPRequestHeader", "contents": "getSOAPRequestHeader(${1:\"${2:namespace}\", \"${3:name}\"${4:, [asXML]}})"},
        { "trigger": "getSOAPResponse", "contents": "getSOAPResponse(${1:\"${2:webservice}\"})"},
        { "trigger": "getSOAPResponseHeader", "contents": "getSOAPResponseHeader(${1:${2:webservice}, \"${3:namespace}\", \"${4:name}\"${5:, [asXML]}})"},
        { "trigger": "getTempDirectory", "contents": "getTempDirectory(${1:})"},
        { "trigger": "getTempFile", "contents": "getTempFile(${1:\"${2:dir}\", \"${3:prefix}\"})"},
        { "trigger": "getTemplatePath", "contents": "getTemplatePath(${1:})"},
        { "trigger": "getTickCount", "contents": "getTickCount(${1:})"},
        { "trigger": "getTimeZoneInfo", "contents": "getTimeZoneInfo(${1:\"${2:text}\"})"},
        { "trigger": "getToken", "contents": "getToken(${1:\"${2:string}\", ${3:index}${4:, [delimiters]}})"},
        { "trigger": "hash", "contents": "hash(${1:\"${2:string}\"${3:, [algorithm]}${4:, [encoding]}})"},
        { "trigger": "hour", "contents": "hour(${1:${2:date}})"},
        { "trigger": "htmlCodeFormat", "contents": "htmlCodeFormat(${1:\"${2:string}\"${3:, [version]}})"},
        { "trigger": "htmlEditFormat", "contents": "htmlEditFormat(${1:\"${2:string}\"${3:, [version]}})"},
        { "trigger": "iif", "contents": "iif(${1:${2:condition}, \"${3:expression1}\", \"${4:expression2}\"})"},
        { "trigger": "incrementValue", "contents": "incrementValue(${1:${2:number}})"},
        { "trigger": "inputBaseN", "contents": "inputBaseN(${1:\"${2:string}\", \"${3:radix}\"})"},
        { "trigger": "insert", "contents": "insert(${1:\"${2:substring}\", \"${3:string}\", ${4:position}})"},
        { "trigger": "int", "contents": "int(${1:${2:number}})"},
        { "trigger": "isArray", "contents": "isArray(${1:${2:value}${3:, [number]}})"},
        { "trigger": "isBinary", "contents": "isBinary(${1:${2:value}})"},
        { "trigger": "isBoolean", "contents": "isBoolean(${1:${2:value}})"},
        { "trigger": "isCustomFunction", "contents": "isCustomFunction(${1:${2:object}})"},
        { "trigger": "isDate", "contents": "isDate(${1:${2:object}})"},
        { "trigger": "isDebugMode", "contents": "isDebugMode(${1:})"},
        { "trigger": "isDefined", "contents": "isDefined(${1:\"${2:variable_name}\"})"},
        { "trigger": "isK2ServerABroker", "contents": "isK2ServerABroker(${1:})"},
        { "trigger": "isK2ServerDocCountExceeded", "contents": "isK2ServerDocCountExceeded(${1:})"},
        { "trigger": "isK2ServerOnline", "contents": "isK2ServerOnline(${1:})"},
        { "trigger": "isLeapYear", "contents": "isLeapYear(${1:${2:year}})"},
        { "trigger": "isNumeric", "contents": "isNumeric(${1:\"${2:string}\"})"},
        { "trigger": "isNumericDate", "contents": "isNumericDate(${1:${2:number}})"},
        { "trigger": "isObject", "contents": "isObject(${1:${2:value}})"},
        { "trigger": "isQuery", "contents": "isQuery(${1:\"${2:value}\"})"},
        { "trigger": "isSimpleValue", "contents": "isSimpleValue(${1:${2:value}})"},
        { "trigger": "isSOAPRequest", "contents": "isSOAPRequest(${1:})"},
        { "trigger": "isStruct", "contents": "isStruct(${1:${2:variable}})"},
        { "trigger": "isUserInRole", "contents": "isUserInRole(${1:\"${2:role_name}\"})"},
        { "trigger": "isValid", "contents": "isValid(${1:\"${2:type}\", ${3:value}, ${4:min}, ${5:max}, \"${6:pattern}\"})"},
        { "trigger": "isWDDX", "contents": "isWDDX(${1:${2:value}})"},
        { "trigger": "isXML", "contents": "isXML(${1:\"${2:value}\"})"},
        { "trigger": "isXMLAttribute", "contents": "isXMLAttribute(${1:${2:value}})"},
        { "trigger": "isXMLDoc", "contents": "isXMLDoc(${1:${2:value}})"},
        { "trigger": "isXMLElem", "contents": "isXMLElem(${1:${2:value}})"},
        { "trigger": "isXMLNode", "contents": "isXMLNode(${1:${2:value}})"},
        { "trigger": "isXMLRoot", "contents": "isXMLRoot(${1:${2:value}})"},
        { "trigger": "javaCast", "contents": "javaCast(${1:\"${2:type}\", \"${3:variable}\"})"},
        { "trigger": "JSStringFormat", "contents": "JSStringFormat(${1:\"${2:string}\"})"},
        { "trigger": "lCase", "contents": "lCase(${1:\"${2:string}\"})"},
        { "trigger": "left", "contents": "left(${1:\"${2:string}\", ${3:count}})"},
        { "trigger": "len", "contents": "len(${1:${2:object}})"},
        { "trigger": "listAppend", "contents": "listAppend(${1:\"${2:list}\", \"${3:value}\"${4:, [delimiters]}})"},
        { "trigger": "listChangeDelims", "contents": "listChangeDelims(${1:\"${2:list}\", \"${3:new_delimiter}\"${4:, [delimiters]}})"},
        { "trigger": "listContains", "contents": "listContains(${1:\"${2:list}\", \"${3:substring}\"${4:, [delimiters]}})"},
        { "trigger": "listContainsNoCase", "contents": "listContainsNoCase(${1:\"${2:list}\", \"${3:substring}\"${4:, [delimiters]}})"},
        { "trigger": "listDeleteAt", "contents": "listDeleteAt(${1:\"${2:list}\", ${3:position}${4:, [delimiters]}})"},
        { "trigger": "listFind", "contents": "listFind(${1:\"${2:list}\", \"${3:value}\"${4:, [delimiters]}})"},
        { "trigger": "listFindNoCase", "contents": "listFindNoCase(${1:\"${2:list}\", \"${3:value}\"${4:, [delimiters]}})"},
        { "trigger": "listFirst", "contents": "listFirst(${1:\"${2:list}\"${3:, [delimiters]}})"},
        { "trigger": "listGetAt", "contents": "listGetAt(${1:\"${2:list}\", ${3:position}${4:, [delimiters]}})"},
        { "trigger": "listInsertAt", "contents": "listInsertAt(${1:\"${2:list}\", ${3:position}, \"${4:value}\"${5:, [delimiters]}})"},
        { "trigger": "listLast", "contents": "listLast(${1:\"${2:list}\"${3:, [delimiters]}})"},
        { "trigger": "listLen", "contents": "listLen(${1:\"${2:list}\"${3:, [delimiters]}})"},
        { "trigger": "listPrepend", "contents": "listPrepend(${1:\"${2:list}\", \"${3:value}\"${4:, [delimiters]}})"},
        { "trigger": "listQualify", "contents": "listQualify(${1:\"${2:list}\", \"${3:qualifier}\"${4:, [delimiters]}${5:, [elements]}})"},
        { "trigger": "listRest", "contents": "listRest(${1:\"${2:list}\"${3:, [delimiters]}})"},
        { "trigger": "listSetAt", "contents": "listSetAt(${1:\"${2:list}\", ${3:position}, \"${4:value}\"${5:, [delimiters]}})"},
        { "trigger": "listSort", "contents": "listSort(${1:\"${2:list}\", \"${3:sort_type}\"${4:, [sort_order]}${5:, [delimiters]}})"},
        { "trigger": "listToArray", "contents": "listToArray(${1:\"${2:list}\"${3:, [delimiters]}})"},
        { "trigger": "listValueCount", "contents": "listValueCount(${1:\"${2:list}\", \"${3:value}\"${4:, [delimiters]}})"},
        { "trigger": "listValueCountNoCase", "contents": "listValueCountNoCase(${1:\"${2:list}\", \"${3:value}\"${4:, [delimiters]}})"},
        { "trigger": "lJustify", "contents": "lJustify(${1:\"${2:string}\", ${3:length}})"},
        { "trigger": "log", "contents": "log(${1:${2:number}})"},
        { "trigger": "log10", "contents": "log10(${1:${2:number}})"},
        { "trigger": "LSCurrencyFormat", "contents": "LSCurrencyFormat(${1:${2:number}${3:, [type]}})"},
        { "trigger": "LSDateFormat", "contents": "LSDateFormat(${1:${2:date}${3:, [mask]}})"},
        { "trigger": "LSEuroCurrencyFormat", "contents": "LSEuroCurrencyFormat(${1:\"${2:currency}\", \"${3:type}\"})"},
        { "trigger": "LSIsCurrency", "contents": "LSIsCurrency(${1:\"${2:string}\"})"},
        { "trigger": "LSIsDate", "contents": "LSIsDate(${1:\"${2:string}\"})"},
        { "trigger": "LSIsNumeric", "contents": "LSIsNumeric(${1:\"${2:string}\"})"},
        { "trigger": "LSNumberFormat", "contents": "LSNumberFormat(${1:${2:number}${3:, [mask]}})"},
        { "trigger": "LSParseCurrency", "contents": "LSParseCurrency(${1:\"${2:string}\"})"},
        { "trigger": "LSParseDateTime", "contents": "LSParseDateTime(${1:\"${2:dt_string}\"})"},
        { "trigger": "LSParseEuroCurrency", "contents": "LSParseEuroCurrency(${1:\"${2:currency_string}\"})"},
        { "trigger": "LSParseNumber", "contents": "LSParseNumber(${1:\"${2:string}\"})"},
        { "trigger": "LSTimeFormat", "contents": "LSTimeFormat(${1:${2:time}${3:, [mask]}})"},
        { "trigger": "lTrim", "contents": "lTrim(${1:\"${2:string}\"})"},
        { "trigger": "max", "contents": "max(${1:${2:number1}, ${3:number2}})"},
        { "trigger": "mid", "contents": "mid(${1:\"${2:string}\", ${3:start}, ${4:count}})"},
        { "trigger": "min", "contents": "min(${1:${2:number1}, ${3:number2}})"},
        { "trigger": "minute", "contents": "minute(${1:${2:date}})"},
        { "trigger": "month", "contents": "month(${1:${2:date}})"},
        { "trigger": "monthAsString", "contents": "monthAsString(${1:${2:month_number}})"},
        { "trigger": "now", "contents": "now(${1:})"},
        { "trigger": "numberFormat", "contents": "numberFormat(${1:${2:number}${3:, [mask]}})"},
        { "trigger": "paragraphFormat", "contents": "paragraphFormat(${1:\"${2:string}\"})"},
        { "trigger": "parseDateTime", "contents": "parseDateTime(${1:\"${2:dt_string}\"${3:, [pop_conversion]}})"},
        { "trigger": "pi", "contents": "pi(${1:})"},
        { "trigger": "preserveSingleQuotes", "contents": "preserveSingleQuotes(${1:\"${2:variable}\"})"},
        { "trigger": "quarter", "contents": "quarter(${1:${2:date}})"},
        { "trigger": "queryAddColumn", "contents": "queryAddColumn(${1:${2:query}, \"${3:column-name}\"${4:, [datatype]}, ${5:array-name}})"},
        { "trigger": "queryAddRow", "contents": "queryAddRow(${1:${2:query}${3:, [number]}})"},
        { "trigger": "queryNew", "contents": "queryNew(${1:\"${2:columnlist}\"${3:, [columntypelist]}})"},
        { "trigger": "querySetCell", "contents": "querySetCell(${1:${2:query}, \"${3:column_name}\", ${4:value}${5:, [row_number]}})"},
        { "trigger": "quotedValueList", "contents": "quotedValueList(${1:${2:column}${3:, [delimiter]}})"},
        { "trigger": "rand", "contents": "rand(${1:${2:[algorithm]}})"},
        { "trigger": "randomize", "contents": "randomize(${1:${2:number}${3:, [algorithm]}})"},
        { "trigger": "randRange", "contents": "randRange(${1:${2:number1}, ${3:number2}${4:, [algorithm]}})"},
        { "trigger": "reRind", "contents": "reRind(${1:${2:reg_expression}, \"${3:string}\"${4:, [start]}${5:, [returnsubexpressions]}})"},
        { "trigger": "reFindNoCase", "contents": "reFindNoCase(${1:${2:reg_expression}, \"${3:string}\"${4:, [start]}${5:, [returnsubexpressions]}})"},
        { "trigger": "releaseComObject", "contents": "releaseComObject(${1:${2:objectName}})"},
        { "trigger": "removeChars", "contents": "removeChars(${1:\"${2:string}\", ${3:start}, ${4:count}})"},
        { "trigger": "repeatString", "contents": "repeatString(${1:\"${2:string}\", ${3:count}})"},
        { "trigger": "replace", "contents": "replace(${1:\"${2:string}\", \"${3:substring1}\", \"${4:substring2}\"${5:, [scope]}})"},
        { "trigger": "replaceList", "contents": "replaceList(${1:\"${2:string}\", \"${3:list1}\", \"${4:list2}\"})"},
        { "trigger": "replaceNoCase", "contents": "replaceNoCase(${1:\"${2:string}\", \"${3:substring1}\", \"${4:substring2}\"${5:, [scope]}})"},
        { "trigger": "reReplace", "contents": "reReplace(${1:\"${2:string}\", ${3:reg_expression}, \"${4:substring}\"${5:, [scope]}})"},
        { "trigger": "reReplaceNoCase", "contents": "reReplaceNoCase(${1:\"${2:string}\", ${3:reg_expression}, \"${4:substring}\"${5:, [scope]}})"},
        { "trigger": "reverse", "contents": "reverse(${1:\"${2:string}\"})"},
        { "trigger": "right", "contents": "right(${1:\"${2:string}\", ${3:count}})"},
        { "trigger": "rJustify", "contents": "rJustify(${1:\"${2:string}\", ${3:length}})"},
        { "trigger": "round", "contents": "round(${1:${2:number}})"},
        { "trigger": "rTrim", "contents": "rTrim(${1:\"${2:string}\"})"},
        { "trigger": "second", "contents": "second(${1:${2:date}})"},
        { "trigger": "sendGatewayMessage", "contents": "sendGatewayMessage(${1:\"${2:gatewayID}\", ${3:data}})"},
        { "trigger": "serialize", "contents": "serialize(${1:variable_name})"},
        { "trigger": "serializeJSON", "contents": "serializeJSON(${1:variable_name})"},
        { "trigger": "setEncoding", "contents": "setEncoding(${1:\"${2:scope_name}\", \"${3:charset}\"})"},
        { "trigger": "setLocale", "contents": "setLocale(${1:\"${2:new_locale}\"})"},
        { "trigger": "setProfileString", "contents": "setProfileString(${1:\"${2:inipath}\", \"${3:section}\", \"${4:entry}\", \"${5:value}\"})"},
        { "trigger": "setVariable", "contents": "setVariable(${1:\"${2:name}\", \"${3:value}\"})"},
        { "trigger": "sgn", "contents": "sgn(${1:${2:number}})"},
        { "trigger": "sin", "contents": "sin(${1:${2:number}})"},
        { "trigger": "spanExcluding", "contents": "spanExcluding(${1:\"${2:string}\", \"${3:set}\"})"},
        { "trigger": "spanIncluding", "contents": "spanIncluding(${1:\"${2:string}\", \"${3:set}\"})"},
        { "trigger": "sqr", "contents": "sqr(${1:${2:number}})"},
        { "trigger": "stripCR", "contents": "stripCR(${1:\"${2:string}\"})"},
        { "trigger": "structAppend", "contents": "structAppend(${1:${2:struct1}, ${3:struct2}${4:, [overwriteFlag]}})"},
        { "trigger": "structClear", "contents": "structClear(${1:${2:structure}})"},
        { "trigger": "structCopy", "contents": "structCopy(${1:${2:structure}})"},
        { "trigger": "structCount", "contents": "structCount(${1:${2:structure}})"},
        { "trigger": "structDelete", "contents": "structDelete(${1:\"${2:structure}\", \"${3:key}\"${4:, [indicatenotexisting]}})"},
        { "trigger": "structFind", "contents": "structFind(${1:${2:structure}, \"${3:key}\"})"},
        { "trigger": "structFindKey", "contents": "structFindKey(${1:${2:top}, \"${3:value}\", \"${4:scope}\"})"},
        { "trigger": "structFindValue", "contents": "structFindValue(${1:${2:top}, \"${3:value}\"${4:, [scop]}})"},
        { "trigger": "structGet", "contents": "structGet(${1:\"${2:pathdesired}\"})"},
        { "trigger": "structInsert", "contents": "structInsert(${1:${2:structure}, \"${3:key}\", ${4:value}${5:, [allowoverwrite]}})"},
        { "trigger": "structIsEmpty", "contents": "structIsEmpty(${1:${2:structure}})"},
        { "trigger": "structKeyArray", "contents": "structKeyArray(${1:${2:structure}})"},
        { "trigger": "structKeyExists", "contents": "structKeyExists(${1:${2:structure}, \"${3:key}\"})"},
        { "trigger": "structKeyList", "contents": "structKeyList(${1:${2:structure}${3:, [delimiter]}})"},
        { "trigger": "structNew", "contents": "structNew(${1:})"},
        { "trigger": "structSort", "contents": "structSort(${1:${2:base}, \"${3:sorttype}\", \"${4:sortorder}\", \"${5:pathtosubelement}\"})"},
        { "trigger": "structUpdate", "contents": "structUpdate(${1:${2:structure}, \"${3:key}\", ${4:value}})"},
        { "trigger": "tan", "contents": "tan(${1:${2:number}})"},
        { "trigger": "timeFormat", "contents": "timeFormat(${1:${2:time}${3:, [mask]}})"},
        { "trigger": "toBase64", "contents": "toBase64(${1:${2:string_or_object}${3:, [encoding]}})"},
        { "trigger": "toBinary", "contents": "toBinary(${1:${2:base64_or_object}})"},
        { "trigger": "toScript", "contents": "toScript(${1:${2:cfvar}, \"${3:javascriptvar}\"${4:, [outputformat]}${5:, [ASFormat]}})"},
        { "trigger": "toString", "contents": "toString(${1:${2:any_value}${3:, [encoding]}})"},
        { "trigger": "trim", "contents": "trim(${1:\"${2:string}\"})"},
        { "trigger": "uCase", "contents": "uCase(${1:\"${2:string}\"})"},
        { "trigger": "urlDecode", "contents": "urlDecode(${1:\"${2:urlencodedstring}\"${3:, [charset]}})"},
        { "trigger": "urlEncodedFormat", "contents": "urlEncodedFormat(${1:\"${2:string}\"${3:, [charset]}})"},
        { "trigger": "urlSessionFormat", "contents": "urlSessionFormat(${1:${2:requesturl}})"},
        { "trigger": "val", "contents": "val(${1:\"${2:string}\"})"},
        { "trigger": "valueList", "contents": "valueList(${1:${2:column}${3:, [delimiter]}})"},
        { "trigger": "week", "contents": "week(${1:${2:date}})"},
        { "trigger": "wrap", "contents": "wrap(${1:\"${2:string}\", ${3:limit}${4:, [strip]}})"},
        { "trigger": "writeOutput", "contents": "writeOutput(${1:\"${2:string}\"})"},
        { "trigger": "xmlChildPos", "contents": "xmlChildPos(${1:${2:elem}, \"${3:childname}\", ${4:n}})"},
        { "trigger": "xmlElemNew", "contents": "xmlElemNew(${1:${2:xmlobj}${3:, [namespace]}, \"${4:childname}\"})"},
        { "trigger": "xmlFormat", "contents": "xmlFormat(${1:\"${2:string}\"})"},
        { "trigger": "xmlGetNodeType", "contents": "xmlGetNodeType(${1:${2:xmlNode}})"},
        { "trigger": "xmlNew", "contents": "xmlNew(${1:${2:[casesensitive]}})"},
        { "trigger": "xmlParse", "contents": "xmlParse(${1:\"${2:xmlstring}\"${3:, [casesensitive]}${4:, [validator]}})"},
        { "trigger": "xmlSearch", "contents": "xmlSearch(${1:${2:xmldoc}, \"${3:xpathstring}\"})"},
        { "trigger": "xmlTransform", "contents": "xmlTransform(${1:\"${2:xml}\", \"${3:xsl}\"${4:, [parameters]}})"},
        { "trigger": "xmlValidate", "contents": "xmlValidate(${1:${2:xmlDoc}${3:, [validator]}})"},
        { "trigger": "year", "contents": "year(${1:${2:date}})"},
        { "trigger": "yesNoFormat", "contents": "yesNoFormat(${1:${2:value}})"}
    ]
}
